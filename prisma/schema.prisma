// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String       @id
  email          String?      @unique
  phone          String?      @unique
  hashedPassword String
  firstName      String?
  lastName       String?
  events         Event[]
  sessions       Session[]
  loginToken     LoginToken[]
  createdAt      DateTime     @default(now()) @db.Timestamptz(3)
  updatedAt      DateTime     @updatedAt @db.Timestamptz(3)
  Attendee       Attendee[]

  @@index([email, phone])
}

model Event {
  id          Int           @id @default(autoincrement())
  title       String
  status      String?       @default("Created")
  type        String
  details     String
  owner       User          @relation(fields: [ownerId], references: [id])
  ownerId     String
  avaliblity  Avalibility[]
  createdAt   DateTime      @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime      @updatedAt @db.Timestamptz(3)
  attendees   Attendee[]
  loginTokens LoginToken[]

  @@index([ownerId])
}

model Attendee {
  id         Int           @id @default(autoincrement())
  eventId    Int
  event      Event         @relation(fields: [eventId], references: [id])
  userId     String
  user       User          @relation(fields: [userId], references: [id])
  createdAt  DateTime      @default(now()) @db.Timestamptz(3)
  updatedAt  DateTime      @updatedAt @db.Timestamptz(3)
  avaliblity Avalibility[]

  @@index([eventId, userId])
}

enum tokenType {
  login
  event_recipeint
}

model LoginToken {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  tokenType tokenType @default(login)
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  eventId   Int?
  event     Event?    @relation(fields: [eventId], references: [id])
  expiresAt DateTime? @db.Timestamptz(3)
  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime  @updatedAt @db.Timestamptz(3)

  @@index([token])
}

model Avalibility {
  id         Int      @id @default(autoincrement())
  eventId    Int
  event      Event    @relation(fields: [eventId], references: [id])
  attendeeId Int
  attendee   Attendee @relation(fields: [attendeeId], references: [id])
  date       DateTime @db.Timestamptz(3)
  createdAt  DateTime @default(now()) @db.Timestamptz(3)
  updatedAt  DateTime @updatedAt @db.Timestamptz(3)
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
}
